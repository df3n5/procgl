/*
#ifdef GL_ES
precision highp float;
#endif

uniform sampler2D tex;
varying vec2 texCoord;
void main() {
	gl_FragColor = texture2D(tex, texCoord);
}
*/
/*

//Newer
#ifdef GL_ES
precision highp float;
#endif

varying vec2 vTextureCoord;

uniform sampler2D uSampler;

void main(void) {
    gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));
}
*/
/*
//XXX:Working
//Procedurally generated checkboard texture.
#ifdef GL_ES
precision highp float;
#endif

//TODO : Pass in as uniform
float uFrequency = 2.0;
vec4 uColor0 = vec4(0.0,0.0,0.0,1.0);
vec4 uColor1 = vec4(1.0,1.0,1.0,1.0);

varying vec2 vTextureCoord;

uniform sampler2D uSampler;

void main(void) {
	vec2 texCoord = mod(floor(vTextureCoord * float(uFrequency*2.0)), 2.0);
	float delta = abs(texCoord.x - texCoord.y);
	
	gl_FragColor = mix(uColor1, uColor0, delta);
}
*/
/*
//Procedurally generated AA checkboard texture.
#ifdef GL_ES
precision highp float;
#endif

//TODO : Pass in as uniform
float uFrequency = 2.0;
vec4 uColor0 = vec4(0.0,0.0,0.0,1.0);
vec4 uColor1 = vec4(1.0,1.0,1.0,1.0);

varying vec2 vTextureCoord;

uniform sampler2D uSampler;

void main(void) {
	vec4 color;
	vec2 st_width;
	vec2 fuzz;
	vec2 check_pos;
	float fuzz_max;
	
	//calc the filter width
	//st_width = fwidth(vTextureCoord);
	st_width.s = fwidth(vTextureCoord.s);
	st_width.t = fwidth(vTextureCoord.t);
	fuzz = st_width * uFrequency * 2.0;
	fuzz_max = max(fuzz.s, fuzz.t);
	
	//get the place in the pattern where we are sampling
	check_pos = fract(vTextureCoord * uFrequency);
	
	if( fuzz_max <= 0.5 )
	{
		//if the filter width is small enough, compute the pattern
		// color by performing a smooth interpolation between the 
		// computed color and the average color
		
		vec2 p = smoothstep( vec2(0.5), fuzz + vec2(0.5), check_pos)
		+ (1.0 - smoothstep(vec2(0.0), fuzz, check_pos));
		
		//XXX: Assigning twice? This is MADNESS!
		color = mix(uColor0, uColor1,
			p.x * p.y + (1.0 - p.x) * (1.0 - p.y));
		color = mix(color, (uColor0 + uColor1)/2.0,
			smoothstep(0.125,0.5, fuzz_max));
	}
	else
	{
		//filter is too wide. just use the average color.
		color = (uColor0 + uColor1)/2.0;
	}
	
	gl_FragColor = color;
}
*/
/*
#extension GL_OES_standard_derivatives : enable

precision highp float;

float uFrequency = 2.0;
vec4 uColor0 = vec4(0.0,0.0,0.0,1.0);
vec4 uColor1 = vec4(1.0,1.0,1.0,1.0);

varying vec2    vTextureCoord;

void
main()
{
   vec4   color;
   vec2   st_width;
   vec2   fuzz;
   vec2   pmod;
   float  fuzz_max;
   
   // determine the filter width
   st_width = fwidth(vTextureCoord);
   
   // calculate the fuzziness taking normal into account
   fuzz = st_width * float(uFrequency) * 2.0;
 
   fuzz_max = max(fuzz.s, fuzz.t);
   
   // calculate position in the checkerboard pattern
   pmod = fract(vTextureCoord * float(uFrequency));
   
   // if the filter width is small enough, compute the pattern color
   if (fuzz_max <= 0.5)
   {
      vec2   p = smoothstep(vec2(0.5), fuzz + vec2(0.5), pmod) + (1.0 - smoothstep(vec2(0.0), fuzz, pmod));
      
      color = mix(uColor0, uColor1, p.x * p.y + (1.0 - p.x) * (1.0 - p.y));
      
      // gradually fade in the average color when we get close to the limit
      color = mix(color, (uColor0 + uColor1)/2.0, smoothstep(0.125, 0.5, fuzz_max));
   }
   else
   {
      // otherwise, use only the average color
      color = (uColor0 + uColor1)/2.0;
   }
   
   gl_FragColor = color;
}
*/
/*
//Per frag lighting
precision mediump float;

uniform vec4 uAmbient;
uniform vec4 uSpecular;
uniform vec4 uDiffuse;
uniform float uSpecularPower;

uniform sampler2D sBaseMap;
uniform sampler2D sBumpMap;

varying vec2 vTexCoord;
varying vec3 vViewDirection;
varying vec3 vLightDirection;

void main( void )
{
   // Fetch basemap color
   vec4 baseColor = texture2D( sBaseMap, vTexCoord );
   
   // Fetch the tangent space normal from normal map
   vec3 normal = texture2D( sBumpMap, vTexCoord ).xyz;
   
   // Scale and bias from [0, 1] to [-1, 1] and normalize
   normal = normalize( normal * 2.0 - 1.0 );
   
   // Normalize the light direction and view direction
   vec3 lightDirection = normalize( vLightDirection );
   vec3 viewDirection = normalize( vViewDirection );
   
   // Compute N.L
   float nDotL = dot( normal, lightDirection );
   
   // Compute reflection vector
   vec3 reflection = ( 2.0 * normal * nDotL ) - lightDirection;
   
   // Compute R.V
   float rDotV = max( 0.0, dot( reflection, viewDirection ) );
   
   // Compute Ambient term
   vec4 ambient = uAmbient * baseColor;
   
   // Compute Diffuse term
   vec4 diffuse = uDiffuse * nDotL * baseColor;
   
   // Compute Specular term
   vec4 specular = uSpecular * pow( rDotV, uSpecularPower );
   
   // Output final color
   gl_FragColor = ambient + diffuse + specular;     
}
*/

/*
#ifdef GL_ES
precision highp float;
#endif
vec4 permute(vec4 x)
{
  return mod(((x*34.0)+1.0)*x, 289.0);
}
vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}
float snoise(vec3 v)
{
  const vec2 C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);
  vec3 i = floor(v + dot(v, C.yyy) );
  vec3 x0 = v - i + dot(i, C.xxx) ;
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy;
  vec3 x3 = x0 - D.yyy;
  i = mod(i, 289.0 );
  vec4 p = permute( permute( permute(
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));
  float n_ = 0.142857142857;
  vec3 ns = n_ * D.wyz - D.xzx;
  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);
  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );
  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);
  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));
  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;
  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),
                                dot(p2,x2), dot(p3,x3) ) );
}

//uniform float time;
float time = 0.1;
varying vec3 v_texCoord3D;
void main( void )
{
	vec3 uvw = v_texCoord3D + 0.1*vec3(snoise(v_texCoord3D + vec3(0.0, 0.0, time)),
			snoise(v_texCoord3D + vec3(43.0, 17.0, time)),
			snoise(v_texCoord3D + vec3(-17.0, -43.0, time)));
	float n = snoise(uvw - vec3(0.0, 0.0, time));
	n += 0.5 * snoise(uvw * 2.0 - vec3(0.0, 0.0, time*1.4));
	n += 0.25 * snoise(uvw * 4.0 - vec3(0.0, 0.0, time*2.0));
	n += 0.125 * snoise(uvw * 8.0 - vec3(0.0, 0.0, time*2.8));
	n += 0.0625 * snoise(uvw * 16.0 - vec3(0.0, 0.0, time*4.0));
	n += 0.03125 * snoise(uvw * 32.0 - vec3(0.0, 0.0, time*5.6));
	n = n * 0.7;
	gl_FragColor = vec4(vec3(1.0, 0.5, 0.0) + vec3(n, n, n), 1.0);
}

*/
/*
#ifdef GL_ES
precision highp float;
#endif

void main(void) {
	gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
}
*/

//XXX:Working
#ifdef GL_ES
precision highp float;
#endif

vec4 permute(vec4 x)
{
  return mod(((x*34.0)+1.0)*x, 289.0);
}
vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}
float snoise(vec3 v)
{
  const vec2 C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);
  vec3 i = floor(v + dot(v, C.yyy) );
  vec3 x0 = v - i + dot(i, C.xxx) ;
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy;
  vec3 x3 = x0 - D.yyy;
  i = mod(i, 289.0 );
  vec4 p = permute( permute( permute(
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));
  float n_ = 0.142857142857;
  vec3 ns = n_ * D.wyz - D.xzx;
  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);
  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );
  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);
  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));
  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;
  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),
                                dot(p2,x2), dot(p3,x3) ) );
}

//TODO : Pass in as uniform
//UNIFORMS
float uFrequency = 2.0;
vec4 uColor0 = vec4(0.0,0.0,0.0,1.0);
vec4 uColor1 = vec4(1.0,1.0,1.0,1.0);

varying vec2 vTextureCoord;

uniform sampler2D uSampler;

varying vec3 v_texCoord3D;
float time = 0.1;

//MAIN
void main(void) {
	vec2 texCoord = mod(floor(vTextureCoord * float(uFrequency*2.0)), 2.0);
	float delta = abs(texCoord.x - texCoord.y);

	vec3 uvw = v_texCoord3D + 0.1*vec3(snoise(v_texCoord3D + vec3(0.0, 0.0, time)),
			snoise(v_texCoord3D + vec3(43.0, 17.0, time)),
			snoise(v_texCoord3D + vec3(-17.0, -43.0, time)));

	float n = snoise(uvw - vec3(0.0, 0.0, time));
	n += 0.5 * snoise(uvw * 2.0 - vec3(0.0, 0.0, time*1.4));
	n += 0.25 * snoise(uvw * 4.0 - vec3(0.0, 0.0, time*2.0));
	n += 0.125 * snoise(uvw * 8.0 - vec3(0.0, 0.0, time*2.8));
	n += 0.0625 * snoise(uvw * 16.0 - vec3(0.0, 0.0, time*4.0));
	n += 0.03125 * snoise(uvw * 32.0 - vec3(0.0, 0.0, time*5.6));
	n = n * 0.7;

	gl_FragColor = vec4(vec3(1.0, 0.5, 0.0) + vec3(n, n, n), 1.0);

	
	//gl_FragColor = mix(uColor1, uColor0, delta);
}

Intro:
  - Motivation: 
    >> Growing popularity of WebGL and HTML5
    >> Potential use for games
	>> Difficult to use large assets
	>> Procedural gen. has come along way
	>> .kkrieger shows how assets can be encoded in a procedural manner, giving results similar to large assets

State-of-the-art (Mostly done from lit review):
  - WebGL
	>> Based on OpenGL ES 2.0
	>> Advantages
		-> Easy delivery of applications (No need for explicit download)
	>> Disadvantages
		-> Limited feature set compared to desktop OpenGL.
  - GwtGL
  - Processing
  - Procedural Content Generation (PCG)
	>> Demoscene
	>> .kkrieger
	>> Perlin Noise
	>> CityEngine

Design:
 - Main design goals:	
	>> Fast loading times
	>> Nice-looking scenes
	>> Scenes which might resemble a game
	>> Ability to assess performance relative to a non-procedural version
	>> Easy to edit design program 
 - How were design goals addressed?
	>> Seperate of procedural and non-procedural versions.
	>> Pipeline for generation of content.
	>> Created texture generators from scratch
	>> Perlin Nose done in frag shader (V.low latency)
	>> Design program written in processing which makes the results quick to see and is also easy to edit

 - What the influences were ?
	>> Architecture
		-> Christopher Alexander's "A Pattern Language"
		-> Plan generation relies on this heavily
	>> CityEngine
	>> Quake
		-> GL Quake
		-> Quake under gwt

Implementation:
 - Details of the the codebase.
	>> UML
	>> Seperation of procedural and non-procedural
	>> Processing application vs GwtGL demo
 - Plan generation
 - Extrusion
 - Perlin Noise
 - Bump mapping
 - Lighting
 - Problems:
	>> WebGL current limitations.
		-> No noise() function
		-> OpenGL ES 2.0 extensions are generally not supported yet.
	>> Time constraints
		-> No time to implement all of the plan generation
		-> No progressive meshes

Evaluation:
 - Performance test results.
	>> Procedural vs non-procedural
 - How easy it is to create a variety of scenes.
 - Ease of use.
 - How do scenes resemble a game?
 - How do scenes resemble a real environment?

Conclusions and Further Work:
 - Progressive meshes
 - Plan generation
 - Artist authoring
